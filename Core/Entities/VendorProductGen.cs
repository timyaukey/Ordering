// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 5/24/2015 2:18:52 PM
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class VendorProductId : EntityId
    {
        public VendorProductId() { }
        public VendorProductId(int value) : base(value) { }
    }

    public partial class VendorProduct : Entity<VendorProductId>
    {
        #region Private property fields

        private VendorId mVendorId;
        private ProductId mProductId;
        private decimal mRetailPriceOverride;
        private string mVendorPartNum;
        private decimal mCaseCost;
        private int mCountInCase;
        private decimal mEachCost;
        private bool mPreferredSource;
        private bool mIsActive;
        private bool mPricingRequiresReview;
        private bool mNumAndCostRequireReview;
        private DateTime mCostVerifiedDate;
        private string mShelfOrder;
        private bool mIsProductDeleted;
        private bool mWholeCasesOnly;
        private string mNotes;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public VendorProduct(VendorProductId Id_,
            VendorId VendorId_,
            ProductId ProductId_,
            decimal RetailPriceOverride_,
            string VendorPartNum_,
            decimal CaseCost_,
            int CountInCase_,
            decimal EachCost_,
            bool PreferredSource_,
            bool IsActive_,
            bool PricingRequiresReview_,
            bool NumAndCostRequireReview_,
            DateTime CostVerifiedDate_,
            string ShelfOrder_,
            bool IsProductDeleted_,
            bool WholeCasesOnly_,
            string Notes_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mVendorId = VendorId_;
            mProductId = ProductId_;
            mRetailPriceOverride = RetailPriceOverride_;
            mVendorPartNum = VendorPartNum_;
            mCaseCost = CaseCost_;
            mCountInCase = CountInCase_;
            mEachCost = EachCost_;
            mPreferredSource = PreferredSource_;
            mIsActive = IsActive_;
            mPricingRequiresReview = PricingRequiresReview_;
            mNumAndCostRequireReview = NumAndCostRequireReview_;
            mCostVerifiedDate = CostVerifiedDate_;
            mShelfOrder = ShelfOrder_;
            mIsProductDeleted = IsProductDeleted_;
            mWholeCasesOnly = WholeCasesOnly_;
            mNotes = Notes_;
        }

        [DebuggerStepThrough]
        public VendorProduct()
            : this(new VendorProductId(),
            new VendorId(),
            new ProductId(),
            0m,
            string.Empty,
            0m,
            0,
            0m,
            true,
            true,
            false,
            false,
            new DateTime(1980, 1, 1),
            string.Empty,
            false,
            false,
            string.Empty,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public VendorId VendorId
        {
            [DebuggerStepThrough]
            get { return mVendorId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mVendorId, value); }
        }

        public ProductId ProductId
        {
            [DebuggerStepThrough]
            get { return mProductId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductId, value); }
        }

        public decimal RetailPriceOverride
        {
            [DebuggerStepThrough]
            get { return mRetailPriceOverride; }
            [DebuggerStepThrough]
            set { PropertySet(ref mRetailPriceOverride, value); }
        }

        public string VendorPartNum
        {
            [DebuggerStepThrough]
            get { return mVendorPartNum; }
            [DebuggerStepThrough]
            set { PropertySet(ref mVendorPartNum, value); }
        }

        public decimal CaseCost
        {
            [DebuggerStepThrough]
            get { return mCaseCost; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCaseCost, value); }
        }

        public int CountInCase
        {
            [DebuggerStepThrough]
            get { return mCountInCase; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCountInCase, value); }
        }

        public decimal EachCost
        {
            [DebuggerStepThrough]
            get { return mEachCost; }
            [DebuggerStepThrough]
            set { PropertySet(ref mEachCost, value); }
        }

        public bool PreferredSource
        {
            [DebuggerStepThrough]
            get { return mPreferredSource; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPreferredSource, value); }
        }

        public bool IsActive
        {
            [DebuggerStepThrough]
            get { return mIsActive; }
            [DebuggerStepThrough]
            set { PropertySet(ref mIsActive, value); }
        }

        public bool PricingRequiresReview
        {
            [DebuggerStepThrough]
            get { return mPricingRequiresReview; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPricingRequiresReview, value); }
        }

        public bool NumAndCostRequireReview
        {
            [DebuggerStepThrough]
            get { return mNumAndCostRequireReview; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNumAndCostRequireReview, value); }
        }

        public DateTime CostVerifiedDate
        {
            [DebuggerStepThrough]
            get { return mCostVerifiedDate; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCostVerifiedDate, value); }
        }

        public string ShelfOrder
        {
            [DebuggerStepThrough]
            get { return mShelfOrder; }
            [DebuggerStepThrough]
            set { PropertySet(ref mShelfOrder, value); }
        }

        public bool IsProductDeleted
        {
            [DebuggerStepThrough]
            get { return mIsProductDeleted; }
            [DebuggerStepThrough]
            set { PropertySet(ref mIsProductDeleted, value); }
        }

        public bool WholeCasesOnly
        {
            [DebuggerStepThrough]
            get { return mWholeCasesOnly; }
            [DebuggerStepThrough]
            set { PropertySet(ref mWholeCasesOnly, value); }
        }

        public string Notes
        {
            [DebuggerStepThrough]
            get { return mNotes; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNotes, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlVendorProductRepository
        : SqlEntityRepository<VendorProduct, VendorProductId, OrderingDataSet.VendorProductRow>,
        IVendorProductRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override VendorProduct CreateEntity(OrderingDataSet.VendorProductRow dataRow)
        {
            VendorProduct entity = new VendorProduct(new VendorProductId(dataRow.VendorProductId),
                new VendorId(dataRow.VendorId),
                new ProductId(dataRow.ProductId),
                (decimal)dataRow.RetailPriceOverride,
                dataRow.VendorPartNum,
                (decimal)dataRow.CaseCost,
                dataRow.CountInCase,
                (decimal)dataRow.EachCost,
                dataRow.PreferredSource > 0 ? true : false,
                dataRow.IsActive > 0 ? true : false,
                dataRow.PricingRequiresReview > 0 ? true : false,
                dataRow.NumAndCostRequireReview > 0 ? true : false,
                dataRow.CostVerifiedDate,
                dataRow.ShelfOrder,
                dataRow.IsProductDeleted > 0 ? true : false,
                dataRow.WholeCasesOnly > 0 ? true : false,
                dataRow.Notes,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<VendorProduct> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.VendorProduct);
            return CreateEntities(dataSet.VendorProduct);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, VendorProduct entity)
        {
            SqlHelper.AddParamInputId(cmd, "@VendorId", entity.VendorId.Value);
            SqlHelper.AddParamInputId(cmd, "@ProductId", entity.ProductId.Value);
            SqlHelper.AddParamMoney(cmd, "@RetailPriceOverride", entity.RetailPriceOverride);
            SqlHelper.AddParamVarchar(cmd, "@VendorPartNum", entity.VendorPartNum ?? string.Empty);
            SqlHelper.AddParamMoney(cmd, "@CaseCost", entity.CaseCost);
            SqlHelper.AddParamInt(cmd, "@CountInCase", entity.CountInCase);
            SqlHelper.AddParamMoney(cmd, "@EachCost", entity.EachCost);
            SqlHelper.AddParamTinyint(cmd, "@PreferredSource", entity.PreferredSource);
            SqlHelper.AddParamTinyint(cmd, "@IsActive", entity.IsActive);
            SqlHelper.AddParamTinyint(cmd, "@PricingRequiresReview", entity.PricingRequiresReview);
            SqlHelper.AddParamTinyint(cmd, "@NumAndCostRequireReview", entity.NumAndCostRequireReview);
            SqlHelper.AddParamDatetime(cmd, "@CostVerifiedDate", entity.CostVerifiedDate);
            SqlHelper.AddParamVarchar(cmd, "@ShelfOrder", entity.ShelfOrder ?? string.Empty);
            SqlHelper.AddParamTinyint(cmd, "@IsProductDeleted", entity.IsProductDeleted);
            SqlHelper.AddParamTinyint(cmd, "@WholeCasesOnly", entity.WholeCasesOnly);
            SqlHelper.AddParamVarchar(cmd, "@Notes", entity.Notes ?? string.Empty);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "VendorProduct"; }
        }

        #endregion
    }
}
