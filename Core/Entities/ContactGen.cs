// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 2/12/2009 10:34:25 PM
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class ContactId : EntityId
    {
        public ContactId() { }
        public ContactId(int value) : base(value) { }
    }

    public partial class Contact : Entity<ContactId>
    {
        #region Private property fields

        private string mFirstName;
        private string mInitial;
        private string mLastName;
        private string mStreet1;
        private string mStreet2;
        private string mCity;
        private string mStateProvince;
        private string mPostalCode;
        private string mCountry;
        private string mPhoneNumber;
        private string mCellNumber;
        private string mFaxNumber;
        private string mEmailAddress;
        private string mNotes;
        private bool mIsActive;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public Contact(ContactId Id_,
            string FirstName_,
            string Initial_,
            string LastName_,
            string Street1_,
            string Street2_,
            string City_,
            string StateProvince_,
            string PostalCode_,
            string Country_,
            string PhoneNumber_,
            string CellNumber_,
            string FaxNumber_,
            string EmailAddress_,
            string Notes_,
            bool IsActive_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mFirstName = FirstName_;
            mInitial = Initial_;
            mLastName = LastName_;
            mStreet1 = Street1_;
            mStreet2 = Street2_;
            mCity = City_;
            mStateProvince = StateProvince_;
            mPostalCode = PostalCode_;
            mCountry = Country_;
            mPhoneNumber = PhoneNumber_;
            mCellNumber = CellNumber_;
            mFaxNumber = FaxNumber_;
            mEmailAddress = EmailAddress_;
            mNotes = Notes_;
            mIsActive = IsActive_;
        }

        [DebuggerStepThrough]
        public Contact()
            : this(new ContactId(),
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            string.Empty,
            true,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public string FirstName
        {
            [DebuggerStepThrough]
            get { return mFirstName; }
            [DebuggerStepThrough]
            set { PropertySet(ref mFirstName, value); }
        }

        public string Initial
        {
            [DebuggerStepThrough]
            get { return mInitial; }
            [DebuggerStepThrough]
            set { PropertySet(ref mInitial, value); }
        }

        public string LastName
        {
            [DebuggerStepThrough]
            get { return mLastName; }
            [DebuggerStepThrough]
            set { PropertySet(ref mLastName, value); }
        }

        public string Street1
        {
            [DebuggerStepThrough]
            get { return mStreet1; }
            [DebuggerStepThrough]
            set { PropertySet(ref mStreet1, value); }
        }

        public string Street2
        {
            [DebuggerStepThrough]
            get { return mStreet2; }
            [DebuggerStepThrough]
            set { PropertySet(ref mStreet2, value); }
        }

        public string City
        {
            [DebuggerStepThrough]
            get { return mCity; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCity, value); }
        }

        public string StateProvince
        {
            [DebuggerStepThrough]
            get { return mStateProvince; }
            [DebuggerStepThrough]
            set { PropertySet(ref mStateProvince, value); }
        }

        public string PostalCode
        {
            [DebuggerStepThrough]
            get { return mPostalCode; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPostalCode, value); }
        }

        public string Country
        {
            [DebuggerStepThrough]
            get { return mCountry; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCountry, value); }
        }

        public string PhoneNumber
        {
            [DebuggerStepThrough]
            get { return mPhoneNumber; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPhoneNumber, value); }
        }

        public string CellNumber
        {
            [DebuggerStepThrough]
            get { return mCellNumber; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCellNumber, value); }
        }

        public string FaxNumber
        {
            [DebuggerStepThrough]
            get { return mFaxNumber; }
            [DebuggerStepThrough]
            set { PropertySet(ref mFaxNumber, value); }
        }

        public string EmailAddress
        {
            [DebuggerStepThrough]
            get { return mEmailAddress; }
            [DebuggerStepThrough]
            set { PropertySet(ref mEmailAddress, value); }
        }

        public string Notes
        {
            [DebuggerStepThrough]
            get { return mNotes; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNotes, value); }
        }

        public bool IsActive
        {
            [DebuggerStepThrough]
            get { return mIsActive; }
            [DebuggerStepThrough]
            set { PropertySet(ref mIsActive, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlContactRepository
        : SqlEntityRepository<Contact, ContactId, OrderingDataSet.ContactRow>,
        IContactRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override Contact CreateEntity(OrderingDataSet.ContactRow dataRow)
        {
            Contact entity = new Contact(new ContactId(dataRow.ContactId),
                dataRow.FirstName,
                dataRow.Initial,
                dataRow.LastName,
                dataRow.Street1,
                dataRow.Street2,
                dataRow.City,
                dataRow.StateProvince,
                dataRow.PostalCode,
                dataRow.Country,
                dataRow.PhoneNumber,
                dataRow.CellNumber,
                dataRow.FaxNumber,
                dataRow.EmailAddress,
                dataRow.Notes,
                dataRow.IsActive > 0 ? true : false,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<Contact> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.Contact);
            return CreateEntities(dataSet.Contact);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, Contact entity)
        {
            SqlHelper.AddParamVarchar(cmd, "@FirstName", entity.FirstName ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@Initial", entity.Initial ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@LastName", entity.LastName ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@Street1", entity.Street1 ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@Street2", entity.Street2 ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@City", entity.City ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@StateProvince", entity.StateProvince ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@PostalCode", entity.PostalCode ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@Country", entity.Country ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@PhoneNumber", entity.PhoneNumber ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@CellNumber", entity.CellNumber ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@FaxNumber", entity.FaxNumber ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@EmailAddress", entity.EmailAddress ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@Notes", entity.Notes ?? string.Empty);
            SqlHelper.AddParamTinyint(cmd, "@IsActive", entity.IsActive);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "Contact"; }
        }

        #endregion
    }
}
