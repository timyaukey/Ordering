using System;
using System.Collections.Generic;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Misc;
using Willowsoft.Ordering.Core.Repositories;

namespace Willowsoft.Ordering.Core.Entities
{
    // Generated by TypeWrapperGenerator

    public partial class JoinPlToVpToProd : IPersistable
    {
        public JoinPlToVpToProd(PurLine innerPurLine, VendorProduct innerVendorProduct, Product innerProduct)
        {
            mInnerPurLine = innerPurLine;
            mInnerVendorProduct = innerVendorProduct;
            mInnerProduct = innerProduct;
        }
        public JoinPlToVpToProd()
        {
            mInnerPurLine = new PurLine();
            mInnerVendorProduct = new VendorProduct();
            mInnerProduct = new Product();
        }

        private PurLine mInnerPurLine;
        public PurLine InnerPurLine { get { return mInnerPurLine; } }

        private VendorProduct mInnerVendorProduct;
        public VendorProduct InnerVendorProduct { get { return mInnerVendorProduct; } }

        private Product mInnerProduct;
        public Product InnerProduct { get { return mInnerProduct; } }

        // PurLine properties

        public PurOrderId PurLine_PurOrderId
        {
            get { return mInnerPurLine.PurOrderId; }
            set { mInnerPurLine.PurOrderId = value; }
        }

        public VendorProductId PurLine_VendorProductId
        {
            get { return mInnerPurLine.VendorProductId; }
            set { mInnerPurLine.VendorProductId = value; }
        }

        public Decimal PurLine_CaseCostOverride
        {
            get { return mInnerPurLine.CaseCostOverride; }
            set { mInnerPurLine.CaseCostOverride = value; }
        }

        public Decimal PurLine_EachCostOverride
        {
            get { return mInnerPurLine.EachCostOverride; }
            set { mInnerPurLine.EachCostOverride = value; }
        }

        public Boolean PurLine_OrderedEaches
        {
            get { return mInnerPurLine.OrderedEaches; }
            set { mInnerPurLine.OrderedEaches = value; }
        }

        public Int32 PurLine_QtyOrdered
        {
            get { return mInnerPurLine.QtyOrdered; }
            set { mInnerPurLine.QtyOrdered = value; }
        }

        public Int32 PurLine_QtyReceived
        {
            get { return mInnerPurLine.QtyReceived; }
            set { mInnerPurLine.QtyReceived = value; }
        }

        public Int32 PurLine_QtyBackordered
        {
            get { return mInnerPurLine.QtyBackordered; }
            set { mInnerPurLine.QtyBackordered = value; }
        }

        public Int32 PurLine_QtyDamaged
        {
            get { return mInnerPurLine.QtyDamaged; }
            set { mInnerPurLine.QtyDamaged = value; }
        }

        public Int32 PurLine_QtyMissing
        {
            get { return mInnerPurLine.QtyMissing; }
            set { mInnerPurLine.QtyMissing = value; }
        }

        public Int32 PurLine_QtyOnHand
        {
            get { return mInnerPurLine.QtyOnHand; }
            set { mInnerPurLine.QtyOnHand = value; }
        }

        public String PurLine_Notes
        {
            get { return mInnerPurLine.Notes; }
            set { mInnerPurLine.Notes = value; }
        }

        public String PurLine_ProductName
        {
            get { return mInnerPurLine.ProductName; }
            set { mInnerPurLine.ProductName = value; }
        }

        public ProductSubCategoryId PurLine_ProductSubCategoryId
        {
            get { return mInnerPurLine.ProductSubCategoryId; }
            set { mInnerPurLine.ProductSubCategoryId = value; }
        }

        public String PurLine_Size
        {
            get { return mInnerPurLine.Size; }
            set { mInnerPurLine.Size = value; }
        }

        public Decimal PurLine_RetailPrice
        {
            get { return mInnerPurLine.RetailPrice; }
            set { mInnerPurLine.RetailPrice = value; }
        }

        public ProductBrandId PurLine_ProductBrandId
        {
            get { return mInnerPurLine.ProductBrandId; }
            set { mInnerPurLine.ProductBrandId = value; }
        }

        public String PurLine_ManufacturerBarcode
        {
            get { return mInnerPurLine.ManufacturerBarcode; }
            set { mInnerPurLine.ManufacturerBarcode = value; }
        }

        public String PurLine_ManufacturerPartNum
        {
            get { return mInnerPurLine.ManufacturerPartNum; }
            set { mInnerPurLine.ManufacturerPartNum = value; }
        }

        public String PurLine_ShelfOrder
        {
            get { return mInnerPurLine.ShelfOrder; }
            set { mInnerPurLine.ShelfOrder = value; }
        }

        public Decimal PurLine_RetailPriceOverride
        {
            get { return mInnerPurLine.RetailPriceOverride; }
            set { mInnerPurLine.RetailPriceOverride = value; }
        }

        public String PurLine_VendorPartNum
        {
            get { return mInnerPurLine.VendorPartNum; }
            set { mInnerPurLine.VendorPartNum = value; }
        }

        public Decimal PurLine_CaseCost
        {
            get { return mInnerPurLine.CaseCost; }
            set { mInnerPurLine.CaseCost = value; }
        }

        public Int32 PurLine_CountInCase
        {
            get { return mInnerPurLine.CountInCase; }
            set { mInnerPurLine.CountInCase = value; }
        }

        public Decimal PurLine_EachCost
        {
            get { return mInnerPurLine.EachCost; }
            set { mInnerPurLine.EachCost = value; }
        }

        public Boolean PurLine_PreferredSource
        {
            get { return mInnerPurLine.PreferredSource; }
            set { mInnerPurLine.PreferredSource = value; }
        }

        public Boolean PurLine_WholeCasesOnly
        {
            get { return mInnerPurLine.WholeCasesOnly; }
            set { mInnerPurLine.WholeCasesOnly = value; }
        }

        public PurLineId PurLine_Id
        {
            get { return mInnerPurLine.Id; }
            set { mInnerPurLine.Id = value; }
        }

        public DateTime PurLine_CreateDate
        {
            get { return mInnerPurLine.CreateDate; }
            set { mInnerPurLine.CreateDate = value; }
        }

        public DateTime PurLine_ModifyDate
        {
            get { return mInnerPurLine.ModifyDate; }
            set { mInnerPurLine.ModifyDate = value; }
        }

        // VendorProduct properties

        public VendorId VendorProduct_VendorId
        {
            get { return mInnerVendorProduct.VendorId; }
            set { mInnerVendorProduct.VendorId = value; }
        }

        public ProductId VendorProduct_ProductId
        {
            get { return mInnerVendorProduct.ProductId; }
            set { mInnerVendorProduct.ProductId = value; }
        }

        public Decimal VendorProduct_RetailPriceOverride
        {
            get { return mInnerVendorProduct.RetailPriceOverride; }
            set { mInnerVendorProduct.RetailPriceOverride = value; }
        }

        public String VendorProduct_VendorPartNum
        {
            get { return mInnerVendorProduct.VendorPartNum; }
            set { mInnerVendorProduct.VendorPartNum = value; }
        }

        public Decimal VendorProduct_CaseCost
        {
            get { return mInnerVendorProduct.CaseCost; }
            set { mInnerVendorProduct.CaseCost = value; }
        }

        public Int32 VendorProduct_CountInCase
        {
            get { return mInnerVendorProduct.CountInCase; }
            set { mInnerVendorProduct.CountInCase = value; }
        }

        public Decimal VendorProduct_EachCost
        {
            get { return mInnerVendorProduct.EachCost; }
            set { mInnerVendorProduct.EachCost = value; }
        }

        public Boolean VendorProduct_PreferredSource
        {
            get { return mInnerVendorProduct.PreferredSource; }
            set { mInnerVendorProduct.PreferredSource = value; }
        }

        public Boolean VendorProduct_IsActive
        {
            get { return mInnerVendorProduct.IsActive; }
            set { mInnerVendorProduct.IsActive = value; }
        }

        public Boolean VendorProduct_PricingRequiresReview
        {
            get { return mInnerVendorProduct.PricingRequiresReview; }
            set { mInnerVendorProduct.PricingRequiresReview = value; }
        }

        public Boolean VendorProduct_NumAndCostRequireReview
        {
            get { return mInnerVendorProduct.NumAndCostRequireReview; }
            set { mInnerVendorProduct.NumAndCostRequireReview = value; }
        }

        public DateTime VendorProduct_CostVerifiedDate
        {
            get { return mInnerVendorProduct.CostVerifiedDate; }
            set { mInnerVendorProduct.CostVerifiedDate = value; }
        }

        public String VendorProduct_ShelfOrder
        {
            get { return mInnerVendorProduct.ShelfOrder; }
            set { mInnerVendorProduct.ShelfOrder = value; }
        }

        public Boolean VendorProduct_IsProductDeleted
        {
            get { return mInnerVendorProduct.IsProductDeleted; }
            set { mInnerVendorProduct.IsProductDeleted = value; }
        }

        public Boolean VendorProduct_WholeCasesOnly
        {
            get { return mInnerVendorProduct.WholeCasesOnly; }
            set { mInnerVendorProduct.WholeCasesOnly = value; }
        }

        public String VendorProduct_Notes
        {
            get { return mInnerVendorProduct.Notes; }
            set { mInnerVendorProduct.Notes = value; }
        }

        public VendorProductId VendorProduct_Id
        {
            get { return mInnerVendorProduct.Id; }
            set { mInnerVendorProduct.Id = value; }
        }

        public DateTime VendorProduct_CreateDate
        {
            get { return mInnerVendorProduct.CreateDate; }
            set { mInnerVendorProduct.CreateDate = value; }
        }

        public DateTime VendorProduct_ModifyDate
        {
            get { return mInnerVendorProduct.ModifyDate; }
            set { mInnerVendorProduct.ModifyDate = value; }
        }

        // Product properties

        public String Product_ProductName
        {
            get { return mInnerProduct.ProductName; }
            set { mInnerProduct.ProductName = value; }
        }

        public ProductSubCategoryId Product_ProductSubCategoryId
        {
            get { return mInnerProduct.ProductSubCategoryId; }
            set { mInnerProduct.ProductSubCategoryId = value; }
        }

        public String Product_Size
        {
            get { return mInnerProduct.Size; }
            set { mInnerProduct.Size = value; }
        }

        public Decimal Product_RetailPrice
        {
            get { return mInnerProduct.RetailPrice; }
            set { mInnerProduct.RetailPrice = value; }
        }

        public ProductBrandId Product_ProductBrandId
        {
            get { return mInnerProduct.ProductBrandId; }
            set { mInnerProduct.ProductBrandId = value; }
        }

        public String Product_ManufacturerBarcode
        {
            get { return mInnerProduct.ManufacturerBarcode; }
            set { mInnerProduct.ManufacturerBarcode = value; }
        }

        public String Product_ManufacturerPartNum
        {
            get { return mInnerProduct.ManufacturerPartNum; }
            set { mInnerProduct.ManufacturerPartNum = value; }
        }

        public Boolean Product_IsActive
        {
            get { return mInnerProduct.IsActive; }
            set { mInnerProduct.IsActive = value; }
        }

        public Boolean Product_PricingRequiresReview
        {
            get { return mInnerProduct.PricingRequiresReview; }
            set { mInnerProduct.PricingRequiresReview = value; }
        }

        public Boolean Product_ExceptionalRetailPrice
        {
            get { return mInnerProduct.ExceptionalRetailPrice; }
            set { mInnerProduct.ExceptionalRetailPrice = value; }
        }

        public Boolean Product_IsProductDeleted
        {
            get { return mInnerProduct.IsProductDeleted; }
            set { mInnerProduct.IsProductDeleted = value; }
        }

        public Boolean Product_MultipleVendors
        {
            get { return mInnerProduct.MultipleVendors; }
            set { mInnerProduct.MultipleVendors = value; }
        }

        public Int32 Product_QtyBusyMin
        {
            get { return mInnerProduct.QtyBusyMin; }
            set { mInnerProduct.QtyBusyMin = value; }
        }

        public Int32 Product_QtyBusyMax
        {
            get { return mInnerProduct.QtyBusyMax; }
            set { mInnerProduct.QtyBusyMax = value; }
        }

        public Int32 Product_QtySlowMin
        {
            get { return mInnerProduct.QtySlowMin; }
            set { mInnerProduct.QtySlowMin = value; }
        }

        public Int32 Product_QtySlowMax
        {
            get { return mInnerProduct.QtySlowMax; }
            set { mInnerProduct.QtySlowMax = value; }
        }

        public String Product_Notes
        {
            get { return mInnerProduct.Notes; }
            set { mInnerProduct.Notes = value; }
        }

        public Decimal Product_RetailPrice2
        {
            get { return mInnerProduct.RetailPrice2; }
            set { mInnerProduct.RetailPrice2 = value; }
        }

        public Decimal Product_Price2SizeMultiplier
        {
            get { return mInnerProduct.Price2SizeMultiplier; }
            set { mInnerProduct.Price2SizeMultiplier = value; }
        }

        public ProductId Product_Id
        {
            get { return mInnerProduct.Id; }
            set { mInnerProduct.Id = value; }
        }

        public DateTime Product_CreateDate
        {
            get { return mInnerProduct.CreateDate; }
            set { mInnerProduct.CreateDate = value; }
        }

        public DateTime Product_ModifyDate
        {
            get { return mInnerProduct.ModifyDate; }
            set { mInnerProduct.ModifyDate = value; }
        }

        // IPersistable members

        public bool IsDirty
        {
            get
            {
                return mInnerPurLine.IsDirty
                    | mInnerVendorProduct.IsDirty
                    | mInnerProduct.IsDirty;
            }
            set
            {
                mInnerPurLine.IsDirty = value;
                mInnerVendorProduct.IsDirty = value;
                mInnerProduct.IsDirty = value;
            }
        }

        public bool IsDeleted
        {
            get
            {
                return mInnerPurLine.IsDeleted
                    | mInnerVendorProduct.IsDeleted
                    | mInnerProduct.IsDeleted;
            }
            set
            {
                mInnerPurLine.IsDeleted = value;
                mInnerVendorProduct.IsDeleted = value;
                mInnerProduct.IsDeleted = value;
            }
        }

        public bool IsPersisted
        {
            get
            {
                return mInnerPurLine.IsPersisted
                    | mInnerVendorProduct.IsPersisted
                    | mInnerProduct.IsPersisted;
            }
        }

        // You'll have to add your own Validate()...
    }
    // end of generated code

    public partial class JoinPlToVpToProd
    {
        private string mSubCategoryName;
        private string mBrandname;
        private PurOrder mOrder;

        public void SetExternalData(
            Dictionary<int, ProductSubCategory> subCategories,
            Dictionary<int, ProductBrand> brands,
            PurOrder order)
        {
            if (mInnerPurLine.ProductSubCategoryId.IsNull)
                mSubCategoryName = string.Empty;
            else
                mSubCategoryName = subCategories[mInnerPurLine.ProductSubCategoryId.Value].SubCategoryName;
            if (mInnerPurLine.ProductBrandId.IsNull)
                mBrandname = string.Empty;
            else
                mBrandname = brands[mInnerPurLine.ProductBrandId.Value].BrandName;
            mOrder = order;
        }

        public string SubCategoryName
        {
            get { return mSubCategoryName; }
        }

        public string BrandName
        {
            get { return mBrandname; }
        }

        public decimal ExtendedCost
        {
            get
            {
                if (PurLine_QtyOrdered == 0)
                    return 0m;
                else
                    return PurLine_QtyOrdered * CostPerUnitOrdered;
            }
        }

        public double BestNormalMargin
        {
            get
            {
                return VendorProduct.ComputeMargin(PurLine_RetailPrice, BestEachCost, FreightPercent);
            }
        }

        public double BestVendorMargin
        {
            get
            {
                return VendorProduct.ComputeMargin(PurLine_RetailPriceOverride, BestEachCost, FreightPercent);
            }
        }

        private decimal NominalCaseCost
        {
            get
            {
                return VendorProduct.NominalCaseCost(PurLine_CaseCost, PurLine_CaseCostOverride);
            }
        }

        private decimal NominalEachCost
        {
            get
            {
                return VendorProduct.NominalEachCost(PurLine_EachCost, PurLine_EachCostOverride);
            }
        }

        public decimal CostPerUnitOrdered
        {
            get
            {
                if (PurLine_OrderedEaches)
                    return NominalEachCost;
                else
                    return NominalCaseCost;
            }
        }

        public decimal EachCostFromNominalCaseCost
        {
            get
            {
                return VendorProduct.EachCostFromNominalCaseCost(PurLine_CountInCase, PurLine_CaseCost, PurLine_CaseCostOverride); 
            }
        }

        public decimal BestEachCost
        {
            get
            {
                decimal cost;
                decimal nominalEach = NominalEachCost;
                if (PurLine_CountInCase > 0)
                {
                    if (!PurLine_OrderedEaches || (PurLine_QtyOrdered % PurLine_CountInCase) == 0)
                    {
                        cost = EachCostFromNominalCaseCost;
                        if (cost > 0m && (cost < nominalEach || nominalEach == 0m))
                            return cost;
                    }
                }
                cost = nominalEach;
                if (cost == 0m)
                    cost = EachCostFromNominalCaseCost;
                return cost;
            }
        }

        private double FreightPercent
        {
            get
            {
                if (mOrder != null)
                {
                    decimal orderTotalWithoutFreight = mOrder.UnpersistedTotal - mOrder.Freight;
                    if (orderTotalWithoutFreight == 0m)
                        return 0.0;
                    else
                        return (double)(mOrder.Freight / orderTotalWithoutFreight);
                }
                return 0d;
            }
        }

        public string OrderingUnit
        {
            get
            {
                return PurLine_OrderedEaches ? "each" : "case/" + PurLine_CountInCase.ToString();
            }
        }

        public string NonBlankSize
        {
            get
            {
                return string.IsNullOrEmpty(PurLine_Size) ? "-" : PurLine_Size;
            }
        }

        public string ProductNameAndModel
        {
            get
            {
                if (!string.IsNullOrEmpty(PurLine_ManufacturerPartNum))
                    return PurLine_ProductName + " (" + PurLine_ManufacturerPartNum + ")";
                else
                    return PurLine_ProductName;
            }
        }

        public void Validate(ErrorList errors)
        {
            mInnerPurLine.Validate(errors);
            //mInnerVendorProduct.Validate(errors);
            //mInnerProduct.Validate(errors);
            if (PurLine_QtyOrdered > 0)
            {
                if (PurLine_OrderedEaches)
                {
                    if (PurLine_EachCost == 0m && PurLine_EachCostOverride == 0m)
                        errors.Add(new EntityValidationError("You may not order in eaches without an each cost"));
                }
                else
                {
                    if (PurLine_CaseCost == 0m && PurLine_CaseCostOverride == 0m)
                        errors.Add(new EntityValidationError("You may not order in cases without a case cost"));
                }
            }
        }

        public override string ToString()
        {
            return InnerPurLine.ToString();
        }
    }

    /// <summary>
    /// An EntityBindingList<JoinPlToVpToProd> that delegates persistence
    /// operations to the PurLine repository.
    /// </summary>
    public class JoinPlToVpToProdBindingList : PersistedBindingList<JoinPlToVpToProd>
    {
        public JoinPlToVpToProdBindingList()
            : base(Ambient.DbSession)
        {
        }

        public static JoinPlToVpToProdBindingList GetOrderLines(
            PurOrderId orderId,
            bool shelfOrder,
            List<ProductCategory> categories,
            Dictionary<int, ProductSubCategory> subCategories,
            Dictionary<int, ProductBrand> brands,
            out PurOrder order)
        {
            JoinPlToVpToProdBindingList venprodJoinList = new JoinPlToVpToProdBindingList();
            using (Ambient.DbSession.Activate())
            {
                order = OrderingRepositories.PurOrder.Get(orderId);

                // Create dictionaries of Product and VendorProduct for PurOrder.VendorId and
                // all product categories.
                Dictionary<int, Product> productDict = new Dictionary<int, Product>();
                Dictionary<int, VendorProduct> vendorProductDict = new Dictionary<int, VendorProduct>();
                foreach (ProductCategory cat in categories)
                {
                    List<VendorProduct> vendorProducts = OrderingRepositories.VendorProduct.Get(
                        order.VendorId, cat.Id);
                    foreach (VendorProduct vendorProduct in vendorProducts)
                    {
                        vendorProductDict.Add(vendorProduct.Id.Value, vendorProduct);
                    }
                    List<Product> products = OrderingRepositories.Product.Get(order.VendorId, cat.Id);
                    foreach (Product product in products)
                    {
                        productDict.Add(product.Id.Value, product);
                    }
                }

                // Construct a JoinPlToVpToProd for each PurLine in order.
                List<PurLine> purLines;
                if (shelfOrder)
                    purLines = OrderingRepositories.PurLine.GetInShelfOrder(orderId);
                else
                    purLines = OrderingRepositories.PurLine.Get(orderId);
                foreach (PurLine purLine in purLines)
                {
                    VendorProduct vendorProduct;
                    Product product;
                    JoinPlToVpToProd join;
                    if (purLine.VendorProductId.IsNull)
                    {
                        // Must have actual objects because some generated
                        // code calls methods of these inner objects.
                        vendorProduct = new VendorProduct();
                        product = new Product();
                    }
                    else
                    {
                        vendorProduct = vendorProductDict[purLine.VendorProductId.Value];
                        product = productDict[vendorProduct.ProductId.Value];
                    }
                    join = new JoinPlToVpToProd(purLine, vendorProduct, product);
                    join.SetExternalData(subCategories, brands, order);
                    venprodJoinList.Add(join);
                }
            }
            return venprodJoinList;
        }

        protected override void Delete(JoinPlToVpToProd entity)
        {
            OrderingRepositories.PurLine.Delete(entity.InnerPurLine);
        }

        protected override void Insert(JoinPlToVpToProd entity)
        {
            OrderingRepositories.PurLine.Insert(entity.InnerPurLine);
        }

        protected override void Update(JoinPlToVpToProd entity)
        {
            OrderingRepositories.PurLine.Update(entity.InnerPurLine);
        }

        public override string EntityDisplayName
        {
            get { return "order line"; }
        }
    }
}
