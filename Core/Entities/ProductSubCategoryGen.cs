// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 9/2/2008 5:34:02 PM
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class ProductSubCategoryId : EntityId
    {
        public ProductSubCategoryId() { }
        public ProductSubCategoryId(int value) : base(value) { }
    }

    public partial class ProductSubCategory : Entity<ProductSubCategoryId>
    {
        #region Private property fields

        private string mSubCategoryName;
        private string mSortCode;
        private ProductCategoryId mProductCategoryId;
        private int mDefaultProfitMargin;
        private bool mPricingRequiresReview;
        private string mNotes;
        private bool mIsActive;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public ProductSubCategory(ProductSubCategoryId Id_,
            string SubCategoryName_,
            string SortCode_,
            ProductCategoryId ProductCategoryId_,
            int DefaultProfitMargin_,
            bool PricingRequiresReview_,
            string Notes_,
            bool IsActive_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mSubCategoryName = SubCategoryName_;
            mSortCode = SortCode_;
            mProductCategoryId = ProductCategoryId_;
            mDefaultProfitMargin = DefaultProfitMargin_;
            mPricingRequiresReview = PricingRequiresReview_;
            mNotes = Notes_;
            mIsActive = IsActive_;
        }

        [DebuggerStepThrough]
        public ProductSubCategory()
            : this(new ProductSubCategoryId(),
            string.Empty,
            string.Empty,
            new ProductCategoryId(),
            50,
            false,
            string.Empty,
            true,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public string SubCategoryName
        {
            [DebuggerStepThrough]
            get { return mSubCategoryName; }
            [DebuggerStepThrough]
            set { PropertySet(ref mSubCategoryName, value); }
        }

        public string SortCode
        {
            [DebuggerStepThrough]
            get { return mSortCode; }
            [DebuggerStepThrough]
            set { PropertySet(ref mSortCode, value); }
        }

        public ProductCategoryId ProductCategoryId
        {
            [DebuggerStepThrough]
            get { return mProductCategoryId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductCategoryId, value); }
        }

        public int DefaultProfitMargin
        {
            [DebuggerStepThrough]
            get { return mDefaultProfitMargin; }
            [DebuggerStepThrough]
            set { PropertySet(ref mDefaultProfitMargin, value); }
        }

        public bool PricingRequiresReview
        {
            [DebuggerStepThrough]
            get { return mPricingRequiresReview; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPricingRequiresReview, value); }
        }

        public string Notes
        {
            [DebuggerStepThrough]
            get { return mNotes; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNotes, value); }
        }

        public bool IsActive
        {
            [DebuggerStepThrough]
            get { return mIsActive; }
            [DebuggerStepThrough]
            set { PropertySet(ref mIsActive, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlProductSubCategoryRepository
        : SqlEntityRepository<ProductSubCategory, ProductSubCategoryId, OrderingDataSet.ProductSubCategoryRow>,
        IProductSubCategoryRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override ProductSubCategory CreateEntity(OrderingDataSet.ProductSubCategoryRow dataRow)
        {
            ProductSubCategory entity = new ProductSubCategory(new ProductSubCategoryId(dataRow.ProductSubCategoryId),
                dataRow.SubCategoryName,
                dataRow.SortCode,
                new ProductCategoryId(dataRow.ProductCategoryId),
                dataRow.DefaultProfitMargin,
                dataRow.PricingRequiresReview > 0 ? true : false,
                dataRow.Notes,
                dataRow.IsActive > 0 ? true : false,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<ProductSubCategory> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.ProductSubCategory);
            return CreateEntities(dataSet.ProductSubCategory);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, ProductSubCategory entity)
        {
            SqlHelper.AddParamVarchar(cmd, "@SubCategoryName", entity.SubCategoryName ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@SortCode", entity.SortCode ?? string.Empty);
            SqlHelper.AddParamInputId(cmd, "@ProductCategoryId", entity.ProductCategoryId.Value);
            SqlHelper.AddParamInt(cmd, "@DefaultProfitMargin", entity.DefaultProfitMargin);
            SqlHelper.AddParamTinyint(cmd, "@PricingRequiresReview", entity.PricingRequiresReview);
            SqlHelper.AddParamVarchar(cmd, "@Notes", entity.Notes ?? string.Empty);
            SqlHelper.AddParamTinyint(cmd, "@IsActive", entity.IsActive);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "ProductSubCategory"; }
        }

        #endregion
    }
}
