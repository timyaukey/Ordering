// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 9/2/2008 5:29:53 PM
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class ProductCategoryId : EntityId
    {
        public ProductCategoryId() { }
        public ProductCategoryId(int value) : base(value) { }
    }

    public partial class ProductCategory : Entity<ProductCategoryId>
    {
        #region Private property fields

        private string mCategoryName;
        private string mSortCode;
        private string mNotes;
        private bool mIsActive;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public ProductCategory(ProductCategoryId Id_,
            string CategoryName_,
            string SortCode_,
            string Notes_,
            bool IsActive_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mCategoryName = CategoryName_;
            mSortCode = SortCode_;
            mNotes = Notes_;
            mIsActive = IsActive_;
        }

        [DebuggerStepThrough]
        public ProductCategory()
            : this(new ProductCategoryId(),
            string.Empty,
            string.Empty,
            string.Empty,
            true,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public string CategoryName
        {
            [DebuggerStepThrough]
            get { return mCategoryName; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCategoryName, value); }
        }

        public string SortCode
        {
            [DebuggerStepThrough]
            get { return mSortCode; }
            [DebuggerStepThrough]
            set { PropertySet(ref mSortCode, value); }
        }

        public string Notes
        {
            [DebuggerStepThrough]
            get { return mNotes; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNotes, value); }
        }

        public bool IsActive
        {
            [DebuggerStepThrough]
            get { return mIsActive; }
            [DebuggerStepThrough]
            set { PropertySet(ref mIsActive, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlProductCategoryRepository
        : SqlEntityRepository<ProductCategory, ProductCategoryId, OrderingDataSet.ProductCategoryRow>,
        IProductCategoryRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override ProductCategory CreateEntity(OrderingDataSet.ProductCategoryRow dataRow)
        {
            ProductCategory entity = new ProductCategory(new ProductCategoryId(dataRow.ProductCategoryId),
                dataRow.CategoryName,
                dataRow.SortCode,
                dataRow.Notes,
                dataRow.IsActive > 0 ? true : false,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<ProductCategory> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.ProductCategory);
            return CreateEntities(dataSet.ProductCategory);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, ProductCategory entity)
        {
            SqlHelper.AddParamVarchar(cmd, "@CategoryName", entity.CategoryName ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@SortCode", entity.SortCode ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@Notes", entity.Notes ?? string.Empty);
            SqlHelper.AddParamTinyint(cmd, "@IsActive", entity.IsActive);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "ProductCategory"; }
        }

        #endregion
    }
}
