// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 2/28/2009 10:15:42 PM
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class PurLineId : EntityId
    {
        public PurLineId() { }
        public PurLineId(int value) : base(value) { }
    }

    public partial class PurLine : Entity<PurLineId>
    {
        #region Private property fields

        private PurOrderId mPurOrderId;
        private VendorProductId mVendorProductId;
        private decimal mCaseCostOverride;
        private decimal mEachCostOverride;
        private bool mOrderedEaches;
        private int mQtyOrdered;
        private int mQtyReceived;
        private int mQtyBackordered;
        private int mQtyDamaged;
        private int mQtyMissing;
        private int mQtyOnHand;
        private string mNotes;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public PurLine(PurLineId Id_,
            PurOrderId PurOrderId_,
            VendorProductId VendorProductId_,
            decimal CaseCostOverride_,
            decimal EachCostOverride_,
            bool OrderedEaches_,
            int QtyOrdered_,
            int QtyReceived_,
            int QtyBackordered_,
            int QtyDamaged_,
            int QtyMissing_,
            int QtyOnHand_,
            string Notes_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mPurOrderId = PurOrderId_;
            mVendorProductId = VendorProductId_;
            mCaseCostOverride = CaseCostOverride_;
            mEachCostOverride = EachCostOverride_;
            mOrderedEaches = OrderedEaches_;
            mQtyOrdered = QtyOrdered_;
            mQtyReceived = QtyReceived_;
            mQtyBackordered = QtyBackordered_;
            mQtyDamaged = QtyDamaged_;
            mQtyMissing = QtyMissing_;
            mQtyOnHand = QtyOnHand_;
            mNotes = Notes_;
        }

        [DebuggerStepThrough]
        public PurLine()
            : this(new PurLineId(),
            new PurOrderId(),
            new VendorProductId(),
            0m,
            0m,
            false,
            0,
            0,
            0,
            0,
            0,
            0,
            string.Empty,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public PurOrderId PurOrderId
        {
            [DebuggerStepThrough]
            get { return mPurOrderId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPurOrderId, value); }
        }

        public VendorProductId VendorProductId
        {
            [DebuggerStepThrough]
            get { return mVendorProductId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mVendorProductId, value); }
        }

        public decimal CaseCostOverride
        {
            [DebuggerStepThrough]
            get { return mCaseCostOverride; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCaseCostOverride, value); }
        }

        public decimal EachCostOverride
        {
            [DebuggerStepThrough]
            get { return mEachCostOverride; }
            [DebuggerStepThrough]
            set { PropertySet(ref mEachCostOverride, value); }
        }

        public bool OrderedEaches
        {
            [DebuggerStepThrough]
            get { return mOrderedEaches; }
            [DebuggerStepThrough]
            set { PropertySet(ref mOrderedEaches, value); }
        }

        public int QtyOrdered
        {
            [DebuggerStepThrough]
            get { return mQtyOrdered; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyOrdered, value); }
        }

        public int QtyReceived
        {
            [DebuggerStepThrough]
            get { return mQtyReceived; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyReceived, value); }
        }

        public int QtyBackordered
        {
            [DebuggerStepThrough]
            get { return mQtyBackordered; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyBackordered, value); }
        }

        public int QtyDamaged
        {
            [DebuggerStepThrough]
            get { return mQtyDamaged; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyDamaged, value); }
        }

        public int QtyMissing
        {
            [DebuggerStepThrough]
            get { return mQtyMissing; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyMissing, value); }
        }

        public int QtyOnHand
        {
            [DebuggerStepThrough]
            get { return mQtyOnHand; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyOnHand, value); }
        }

        public string Notes
        {
            [DebuggerStepThrough]
            get { return mNotes; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNotes, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlPurLineRepository
        : SqlEntityRepository<PurLine, PurLineId, OrderingDataSet.PurLineRow>,
        IPurLineRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override PurLine CreateEntity(OrderingDataSet.PurLineRow dataRow)
        {
            PurLine entity = new PurLine(new PurLineId(dataRow.PurLineId),
                new PurOrderId(dataRow.PurOrderId),
                new VendorProductId(dataRow.VendorProductId),
                (decimal)dataRow.CaseCostOverride,
                (decimal)dataRow.EachCostOverride,
                dataRow.OrderedEaches > 0 ? true : false,
                dataRow.QtyOrdered,
                dataRow.QtyReceived,
                dataRow.QtyBackordered,
                dataRow.QtyDamaged,
                dataRow.QtyMissing,
                dataRow.QtyOnHand,
                dataRow.Notes,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<PurLine> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.PurLine);
            return CreateEntities(dataSet.PurLine);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, PurLine entity)
        {
            SqlHelper.AddParamInputId(cmd, "@PurOrderId", entity.PurOrderId.Value);
            SqlHelper.AddParamInputId(cmd, "@VendorProductId", entity.VendorProductId.Value);
            SqlHelper.AddParamMoney(cmd, "@CaseCostOverride", entity.CaseCostOverride);
            SqlHelper.AddParamMoney(cmd, "@EachCostOverride", entity.EachCostOverride);
            SqlHelper.AddParamTinyint(cmd, "@OrderedEaches", entity.OrderedEaches);
            SqlHelper.AddParamInt(cmd, "@QtyOrdered", entity.QtyOrdered);
            SqlHelper.AddParamInt(cmd, "@QtyReceived", entity.QtyReceived);
            SqlHelper.AddParamInt(cmd, "@QtyBackordered", entity.QtyBackordered);
            SqlHelper.AddParamInt(cmd, "@QtyDamaged", entity.QtyDamaged);
            SqlHelper.AddParamInt(cmd, "@QtyMissing", entity.QtyMissing);
            SqlHelper.AddParamInt(cmd, "@QtyOnHand", entity.QtyOnHand);
            SqlHelper.AddParamVarchar(cmd, "@Notes", entity.Notes ?? string.Empty);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "PurLine"; }
        }

        #endregion
    }
}
