// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 5/25/2015 12:04:30 PM
// Will generate EntityId, Entity, and if specified SqlEntityRepository classes

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class PurLineId : EntityId
    {
        public PurLineId() { }
        public PurLineId(int value) : base(value) { }
    }

    public partial class PurLine : Entity<PurLineId>
    {
        #region Private property fields

        private PurOrderId mPurOrderId;
        private VendorProductId mVendorProductId;
        private decimal mCaseCostOverride;
        private decimal mEachCostOverride;
        private bool mOrderedEaches;
        private int mQtyOrdered;
        private int mQtyReceived;
        private int mQtyBackordered;
        private int mQtyDamaged;
        private int mQtyMissing;
        private int mQtyOnHand;
        private bool mSpecialOrder;
        private string mNotes;
        private string mProductName;
        private ProductSubCategoryId mProductSubCategoryId;
        private string mSize;
        private decimal mRetailPrice;
        private ProductBrandId mProductBrandId;
        private string mManufacturerBarcode;
        private string mManufacturerPartNum;
        private string mShelfOrder;
        private decimal mRetailPriceOverride;
        private string mVendorPartNum;
        private decimal mCaseCost;
        private int mCountInCase;
        private decimal mEachCost;
        private bool mPreferredSource;
        private bool mWholeCasesOnly;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public PurLine(PurLineId Id_,
            PurOrderId PurOrderId_,
            VendorProductId VendorProductId_,
            decimal CaseCostOverride_,
            decimal EachCostOverride_,
            bool OrderedEaches_,
            int QtyOrdered_,
            int QtyReceived_,
            int QtyBackordered_,
            int QtyDamaged_,
            int QtyMissing_,
            int QtyOnHand_,
            bool SpecialOrder_,
            string Notes_,
            string ProductName_,
            ProductSubCategoryId ProductSubCategoryId_,
            string Size_,
            decimal RetailPrice_,
            ProductBrandId ProductBrandId_,
            string ManufacturerBarcode_,
            string ManufacturerPartNum_,
            string ShelfOrder_,
            decimal RetailPriceOverride_,
            string VendorPartNum_,
            decimal CaseCost_,
            int CountInCase_,
            decimal EachCost_,
            bool PreferredSource_,
            bool WholeCasesOnly_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mPurOrderId = PurOrderId_;
            mVendorProductId = VendorProductId_;
            mCaseCostOverride = CaseCostOverride_;
            mEachCostOverride = EachCostOverride_;
            mOrderedEaches = OrderedEaches_;
            mQtyOrdered = QtyOrdered_;
            mQtyReceived = QtyReceived_;
            mQtyBackordered = QtyBackordered_;
            mQtyDamaged = QtyDamaged_;
            mQtyMissing = QtyMissing_;
            mQtyOnHand = QtyOnHand_;
            mSpecialOrder = SpecialOrder_;
            mNotes = Notes_;
            mProductName = ProductName_;
            mProductSubCategoryId = ProductSubCategoryId_;
            mSize = Size_;
            mRetailPrice = RetailPrice_;
            mProductBrandId = ProductBrandId_;
            mManufacturerBarcode = ManufacturerBarcode_;
            mManufacturerPartNum = ManufacturerPartNum_;
            mShelfOrder = ShelfOrder_;
            mRetailPriceOverride = RetailPriceOverride_;
            mVendorPartNum = VendorPartNum_;
            mCaseCost = CaseCost_;
            mCountInCase = CountInCase_;
            mEachCost = EachCost_;
            mPreferredSource = PreferredSource_;
            mWholeCasesOnly = WholeCasesOnly_;
        }

        [DebuggerStepThrough]
        public PurLine()
            : this(new PurLineId(),
            new PurOrderId(),
            new VendorProductId(),
            0m,
            0m,
            false,
            0,
            0,
            0,
            0,
            0,
            0,
            false,
            string.Empty,
            string.Empty,
            new ProductSubCategoryId(),
            string.Empty,
            0m,
            new ProductBrandId(),
            string.Empty,
            string.Empty,
            string.Empty,
            0m,
            string.Empty,
            0m,
            0,
            0m,
            true,
            false,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public PurOrderId PurOrderId
        {
            [DebuggerStepThrough]
            get { return mPurOrderId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPurOrderId, value); }
        }

        public VendorProductId VendorProductId
        {
            [DebuggerStepThrough]
            get { return mVendorProductId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mVendorProductId, value); }
        }

        public decimal CaseCostOverride
        {
            [DebuggerStepThrough]
            get { return mCaseCostOverride; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCaseCostOverride, value); }
        }

        public decimal EachCostOverride
        {
            [DebuggerStepThrough]
            get { return mEachCostOverride; }
            [DebuggerStepThrough]
            set { PropertySet(ref mEachCostOverride, value); }
        }

        public bool OrderedEaches
        {
            [DebuggerStepThrough]
            get { return mOrderedEaches; }
            [DebuggerStepThrough]
            set { PropertySet(ref mOrderedEaches, value); }
        }

        public int QtyOrdered
        {
            [DebuggerStepThrough]
            get { return mQtyOrdered; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyOrdered, value); }
        }

        public int QtyReceived
        {
            [DebuggerStepThrough]
            get { return mQtyReceived; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyReceived, value); }
        }

        public int QtyBackordered
        {
            [DebuggerStepThrough]
            get { return mQtyBackordered; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyBackordered, value); }
        }

        public int QtyDamaged
        {
            [DebuggerStepThrough]
            get { return mQtyDamaged; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyDamaged, value); }
        }

        public int QtyMissing
        {
            [DebuggerStepThrough]
            get { return mQtyMissing; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyMissing, value); }
        }

        public int QtyOnHand
        {
            [DebuggerStepThrough]
            get { return mQtyOnHand; }
            [DebuggerStepThrough]
            set { PropertySet(ref mQtyOnHand, value); }
        }

        public bool SpecialOrder
        {
            [DebuggerStepThrough]
            get { return mSpecialOrder; }
            [DebuggerStepThrough]
            set { PropertySet(ref mSpecialOrder, value); }
        }

        public string Notes
        {
            [DebuggerStepThrough]
            get { return mNotes; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNotes, value); }
        }

        public string ProductName
        {
            [DebuggerStepThrough]
            get { return mProductName; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductName, value); }
        }

        public ProductSubCategoryId ProductSubCategoryId
        {
            [DebuggerStepThrough]
            get { return mProductSubCategoryId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductSubCategoryId, value); }
        }

        public string Size
        {
            [DebuggerStepThrough]
            get { return mSize; }
            [DebuggerStepThrough]
            set { PropertySet(ref mSize, value); }
        }

        public decimal RetailPrice
        {
            [DebuggerStepThrough]
            get { return mRetailPrice; }
            [DebuggerStepThrough]
            set { PropertySet(ref mRetailPrice, value); }
        }

        public ProductBrandId ProductBrandId
        {
            [DebuggerStepThrough]
            get { return mProductBrandId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductBrandId, value); }
        }

        public string ManufacturerBarcode
        {
            [DebuggerStepThrough]
            get { return mManufacturerBarcode; }
            [DebuggerStepThrough]
            set { PropertySet(ref mManufacturerBarcode, value); }
        }

        public string ManufacturerPartNum
        {
            [DebuggerStepThrough]
            get { return mManufacturerPartNum; }
            [DebuggerStepThrough]
            set { PropertySet(ref mManufacturerPartNum, value); }
        }

        public string ShelfOrder
        {
            [DebuggerStepThrough]
            get { return mShelfOrder; }
            [DebuggerStepThrough]
            set { PropertySet(ref mShelfOrder, value); }
        }

        public decimal RetailPriceOverride
        {
            [DebuggerStepThrough]
            get { return mRetailPriceOverride; }
            [DebuggerStepThrough]
            set { PropertySet(ref mRetailPriceOverride, value); }
        }

        public string VendorPartNum
        {
            [DebuggerStepThrough]
            get { return mVendorPartNum; }
            [DebuggerStepThrough]
            set { PropertySet(ref mVendorPartNum, value); }
        }

        public decimal CaseCost
        {
            [DebuggerStepThrough]
            get { return mCaseCost; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCaseCost, value); }
        }

        public int CountInCase
        {
            [DebuggerStepThrough]
            get { return mCountInCase; }
            [DebuggerStepThrough]
            set { PropertySet(ref mCountInCase, value); }
        }

        public decimal EachCost
        {
            [DebuggerStepThrough]
            get { return mEachCost; }
            [DebuggerStepThrough]
            set { PropertySet(ref mEachCost, value); }
        }

        public bool PreferredSource
        {
            [DebuggerStepThrough]
            get { return mPreferredSource; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPreferredSource, value); }
        }

        public bool WholeCasesOnly
        {
            [DebuggerStepThrough]
            get { return mWholeCasesOnly; }
            [DebuggerStepThrough]
            set { PropertySet(ref mWholeCasesOnly, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlPurLineRepository
        : SqlEntityRepository<PurLine, PurLineId, OrderingDataSet.PurLineRow>,
        IPurLineRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override PurLine CreateEntity(OrderingDataSet.PurLineRow dataRow)
        {
            PurLine entity = new PurLine(new PurLineId(dataRow.PurLineId),
                new PurOrderId(dataRow.PurOrderId),
                new VendorProductId(dataRow.VendorProductId),
                (decimal)dataRow.CaseCostOverride,
                (decimal)dataRow.EachCostOverride,
                dataRow.OrderedEaches > 0 ? true : false,
                dataRow.QtyOrdered,
                dataRow.QtyReceived,
                dataRow.QtyBackordered,
                dataRow.QtyDamaged,
                dataRow.QtyMissing,
                dataRow.QtyOnHand,
                dataRow.SpecialOrder > 0 ? true : false,
                dataRow.Notes,
                dataRow.ProductName,
                new ProductSubCategoryId(dataRow.ProductSubCategoryId),
                dataRow.Size,
                (decimal)dataRow.RetailPrice,
                new ProductBrandId(dataRow.ProductBrandId),
                dataRow.ManufacturerBarcode,
                dataRow.ManufacturerPartNum,
                dataRow.ShelfOrder,
                (decimal)dataRow.RetailPriceOverride,
                dataRow.VendorPartNum,
                (decimal)dataRow.CaseCost,
                dataRow.CountInCase,
                (decimal)dataRow.EachCost,
                dataRow.PreferredSource > 0 ? true : false,
                dataRow.WholeCasesOnly > 0 ? true : false,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<PurLine> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.PurLine);
            return CreateEntities(dataSet.PurLine);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, PurLine entity)
        {
            SqlHelper.AddParamInputId(cmd, "@PurOrderId", entity.PurOrderId.Value);
            SqlHelper.AddParamInputId(cmd, "@VendorProductId", entity.VendorProductId.Value);
            SqlHelper.AddParamMoney(cmd, "@CaseCostOverride", entity.CaseCostOverride);
            SqlHelper.AddParamMoney(cmd, "@EachCostOverride", entity.EachCostOverride);
            SqlHelper.AddParamTinyint(cmd, "@OrderedEaches", entity.OrderedEaches);
            SqlHelper.AddParamInt(cmd, "@QtyOrdered", entity.QtyOrdered);
            SqlHelper.AddParamInt(cmd, "@QtyReceived", entity.QtyReceived);
            SqlHelper.AddParamInt(cmd, "@QtyBackordered", entity.QtyBackordered);
            SqlHelper.AddParamInt(cmd, "@QtyDamaged", entity.QtyDamaged);
            SqlHelper.AddParamInt(cmd, "@QtyMissing", entity.QtyMissing);
            SqlHelper.AddParamInt(cmd, "@QtyOnHand", entity.QtyOnHand);
            SqlHelper.AddParamTinyint(cmd, "@SpecialOrder", entity.SpecialOrder);
            SqlHelper.AddParamVarchar(cmd, "@Notes", entity.Notes ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@ProductName", entity.ProductName ?? string.Empty);
            SqlHelper.AddParamInputId(cmd, "@ProductSubCategoryId", entity.ProductSubCategoryId.Value);
            SqlHelper.AddParamVarchar(cmd, "@Size", entity.Size ?? string.Empty);
            SqlHelper.AddParamMoney(cmd, "@RetailPrice", entity.RetailPrice);
            SqlHelper.AddParamInputId(cmd, "@ProductBrandId", entity.ProductBrandId.Value);
            SqlHelper.AddParamVarchar(cmd, "@ManufacturerBarcode", entity.ManufacturerBarcode ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@ManufacturerPartNum", entity.ManufacturerPartNum ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@ShelfOrder", entity.ShelfOrder ?? string.Empty);
            SqlHelper.AddParamMoney(cmd, "@RetailPriceOverride", entity.RetailPriceOverride);
            SqlHelper.AddParamVarchar(cmd, "@VendorPartNum", entity.VendorPartNum ?? string.Empty);
            SqlHelper.AddParamMoney(cmd, "@CaseCost", entity.CaseCost);
            SqlHelper.AddParamInt(cmd, "@CountInCase", entity.CountInCase);
            SqlHelper.AddParamMoney(cmd, "@EachCost", entity.EachCost);
            SqlHelper.AddParamTinyint(cmd, "@PreferredSource", entity.PreferredSource);
            SqlHelper.AddParamTinyint(cmd, "@WholeCasesOnly", entity.WholeCasesOnly);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "PurLine"; }
        }

        #endregion
    }
}

// End of generated code
