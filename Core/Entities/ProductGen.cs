// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 9/2/2008 10:11:50 PM
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class ProductId : EntityId
    {
        public ProductId() { }
        public ProductId(int value) : base(value) { }
    }

    public partial class Product : Entity<ProductId>
    {
        #region Private property fields

        private string mProductName;
        private ProductSubCategoryId mProductSubCategoryId;
        private string mSize;
        private decimal mRetailPrice;
        private ProductBrandId mProductBrandId;
        private string mManufacturerBarcode;
        private string mManufacturerPartNum;
        private bool mIsActive;
        private bool mPricingRequiresReview;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public Product(ProductId Id_,
            string ProductName_,
            ProductSubCategoryId ProductSubCategoryId_,
            string Size_,
            decimal RetailPrice_,
            ProductBrandId ProductBrandId_,
            string ManufacturerBarcode_,
            string ManufacturerPartNum_,
            bool IsActive_,
            bool PricingRequiresReview_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mProductName = ProductName_;
            mProductSubCategoryId = ProductSubCategoryId_;
            mSize = Size_;
            mRetailPrice = RetailPrice_;
            mProductBrandId = ProductBrandId_;
            mManufacturerBarcode = ManufacturerBarcode_;
            mManufacturerPartNum = ManufacturerPartNum_;
            mIsActive = IsActive_;
            mPricingRequiresReview = PricingRequiresReview_;
        }

        [DebuggerStepThrough]
        public Product()
            : this(new ProductId(),
            string.Empty,
            new ProductSubCategoryId(),
            string.Empty,
            0m,
            new ProductBrandId(),
            string.Empty,
            string.Empty,
            true,
            false,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public string ProductName
        {
            [DebuggerStepThrough]
            get { return mProductName; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductName, value); }
        }

        public ProductSubCategoryId ProductSubCategoryId
        {
            [DebuggerStepThrough]
            get { return mProductSubCategoryId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductSubCategoryId, value); }
        }

        public string Size
        {
            [DebuggerStepThrough]
            get { return mSize; }
            [DebuggerStepThrough]
            set { PropertySet(ref mSize, value); }
        }

        public decimal RetailPrice
        {
            [DebuggerStepThrough]
            get { return mRetailPrice; }
            [DebuggerStepThrough]
            set { PropertySet(ref mRetailPrice, value); }
        }

        public ProductBrandId ProductBrandId
        {
            [DebuggerStepThrough]
            get { return mProductBrandId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mProductBrandId, value); }
        }

        public string ManufacturerBarcode
        {
            [DebuggerStepThrough]
            get { return mManufacturerBarcode; }
            [DebuggerStepThrough]
            set { PropertySet(ref mManufacturerBarcode, value); }
        }

        public string ManufacturerPartNum
        {
            [DebuggerStepThrough]
            get { return mManufacturerPartNum; }
            [DebuggerStepThrough]
            set { PropertySet(ref mManufacturerPartNum, value); }
        }

        public bool IsActive
        {
            [DebuggerStepThrough]
            get { return mIsActive; }
            [DebuggerStepThrough]
            set { PropertySet(ref mIsActive, value); }
        }

        public bool PricingRequiresReview
        {
            [DebuggerStepThrough]
            get { return mPricingRequiresReview; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPricingRequiresReview, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlProductRepository
        : SqlEntityRepository<Product, ProductId, OrderingDataSet.ProductRow>,
        IProductRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override Product CreateEntity(OrderingDataSet.ProductRow dataRow)
        {
            Product entity = new Product(new ProductId(dataRow.ProductId),
                dataRow.ProductName,
                new ProductSubCategoryId(dataRow.ProductSubCategoryId),
                dataRow.Size,
                (decimal)dataRow.RetailPrice,
                new ProductBrandId(dataRow.ProductBrandId),
                dataRow.ManufacturerBarcode,
                dataRow.ManufacturerPartNum,
                dataRow.IsActive > 0 ? true : false,
                dataRow.PricingRequiresReview > 0 ? true : false,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<Product> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.Product);
            return CreateEntities(dataSet.Product);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, Product entity)
        {
            SqlHelper.AddParamVarchar(cmd, "@ProductName", entity.ProductName ?? string.Empty);
            SqlHelper.AddParamInputId(cmd, "@ProductSubCategoryId", entity.ProductSubCategoryId.Value);
            SqlHelper.AddParamVarchar(cmd, "@Size", entity.Size ?? string.Empty);
            SqlHelper.AddParamMoney(cmd, "@RetailPrice", entity.RetailPrice);
            SqlHelper.AddParamInputId(cmd, "@ProductBrandId", entity.ProductBrandId.Value);
            SqlHelper.AddParamVarchar(cmd, "@ManufacturerBarcode", entity.ManufacturerBarcode ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@ManufacturerPartNum", entity.ManufacturerPartNum ?? string.Empty);
            SqlHelper.AddParamTinyint(cmd, "@IsActive", entity.IsActive);
            SqlHelper.AddParamTinyint(cmd, "@PricingRequiresReview", entity.PricingRequiresReview);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "Product"; }
        }

        #endregion
    }
}
