// Generated by Willowsoft.WillowLib.CodeGen.ClassCreator at 5/24/2015 10:27:50 AM
using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data.SqlClient;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Sql;
using Willowsoft.Ordering.Core.Entities;

namespace Willowsoft.Ordering.Core.Entities
{
    [DebuggerStepThrough]
    public class VendorId : EntityId
    {
        public VendorId() { }
        public VendorId(int value) : base(value) { }
    }

    public partial class Vendor : Entity<VendorId>
    {
        #region Private property fields

        private string mVendorName;
        private string mTerms;
        private int mPriceCode;
        private string mShipping;
        private string mSortCode;
        private ContactId mRepContactId;
        private ContactId mOrdContactId;
        private ContactId mShpContactId;
        private ContactId mActContactId;
        private string mNotes;
        private bool mPreferredVendor;
        private bool mIsActive;
        private bool mPricingRequiresReview;
        private decimal mMinimumOrder;

        #endregion

        #region Constructors

        [DebuggerStepThrough]
        public Vendor(VendorId Id_,
            string VendorName_,
            string Terms_,
            int PriceCode_,
            string Shipping_,
            string SortCode_,
            ContactId RepContactId_,
            ContactId OrdContactId_,
            ContactId ShpContactId_,
            ContactId ActContactId_,
            string Notes_,
            bool PreferredVendor_,
            bool IsActive_,
            bool PricingRequiresReview_,
            decimal MinimumOrder_,
            DateTime CreateDate_,
            DateTime ModifyDate_)
            : base(Id_, CreateDate_, ModifyDate_)
        {
            mVendorName = VendorName_;
            mTerms = Terms_;
            mPriceCode = PriceCode_;
            mShipping = Shipping_;
            mSortCode = SortCode_;
            mRepContactId = RepContactId_;
            mOrdContactId = OrdContactId_;
            mShpContactId = ShpContactId_;
            mActContactId = ActContactId_;
            mNotes = Notes_;
            mPreferredVendor = PreferredVendor_;
            mIsActive = IsActive_;
            mPricingRequiresReview = PricingRequiresReview_;
            mMinimumOrder = MinimumOrder_;
        }

        [DebuggerStepThrough]
        public Vendor()
            : this(new VendorId(),
            string.Empty,
            string.Empty,
            0,
            string.Empty,
            string.Empty,
            new ContactId(),
            new ContactId(),
            new ContactId(),
            new ContactId(),
            string.Empty,
            true,
            true,
            false,
            0m,
            DateTime.Now, DateTime.Now)
        {
        }

        #endregion

        #region Encapsulated fields

        public string VendorName
        {
            [DebuggerStepThrough]
            get { return mVendorName; }
            [DebuggerStepThrough]
            set { PropertySet(ref mVendorName, value); }
        }

        public string Terms
        {
            [DebuggerStepThrough]
            get { return mTerms; }
            [DebuggerStepThrough]
            set { PropertySet(ref mTerms, value); }
        }

        public int PriceCode
        {
            [DebuggerStepThrough]
            get { return mPriceCode; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPriceCode, value); }
        }

        public string Shipping
        {
            [DebuggerStepThrough]
            get { return mShipping; }
            [DebuggerStepThrough]
            set { PropertySet(ref mShipping, value); }
        }

        public string SortCode
        {
            [DebuggerStepThrough]
            get { return mSortCode; }
            [DebuggerStepThrough]
            set { PropertySet(ref mSortCode, value); }
        }

        public ContactId RepContactId
        {
            [DebuggerStepThrough]
            get { return mRepContactId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mRepContactId, value); }
        }

        public ContactId OrdContactId
        {
            [DebuggerStepThrough]
            get { return mOrdContactId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mOrdContactId, value); }
        }

        public ContactId ShpContactId
        {
            [DebuggerStepThrough]
            get { return mShpContactId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mShpContactId, value); }
        }

        public ContactId ActContactId
        {
            [DebuggerStepThrough]
            get { return mActContactId; }
            [DebuggerStepThrough]
            set { PropertySet(ref mActContactId, value); }
        }

        public string Notes
        {
            [DebuggerStepThrough]
            get { return mNotes; }
            [DebuggerStepThrough]
            set { PropertySet(ref mNotes, value); }
        }

        public bool PreferredVendor
        {
            [DebuggerStepThrough]
            get { return mPreferredVendor; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPreferredVendor, value); }
        }

        public bool IsActive
        {
            [DebuggerStepThrough]
            get { return mIsActive; }
            [DebuggerStepThrough]
            set { PropertySet(ref mIsActive, value); }
        }

        public bool PricingRequiresReview
        {
            [DebuggerStepThrough]
            get { return mPricingRequiresReview; }
            [DebuggerStepThrough]
            set { PropertySet(ref mPricingRequiresReview, value); }
        }

        public decimal MinimumOrder
        {
            [DebuggerStepThrough]
            get { return mMinimumOrder; }
            [DebuggerStepThrough]
            set { PropertySet(ref mMinimumOrder, value); }
        }

        #endregion
    }
}

namespace Willowsoft.Ordering.Core.Repositories
{
    public partial class SqlVendorRepository
        : SqlEntityRepository<Vendor, VendorId, OrderingDataSet.VendorRow>,
        IVendorRepository
    {
        #region SqlEntityRepository Members

        [DebuggerStepThrough]
        protected override Vendor CreateEntity(OrderingDataSet.VendorRow dataRow)
        {
            Vendor entity = new Vendor(new VendorId(dataRow.VendorId),
                dataRow.VendorName,
                dataRow.Terms,
                dataRow.PriceCode,
                dataRow.Shipping,
                dataRow.SortCode,
                new ContactId(dataRow.RepContactId),
                new ContactId(dataRow.OrdContactId),
                new ContactId(dataRow.ShpContactId),
                new ContactId(dataRow.ActContactId),
                dataRow.Notes,
                dataRow.PreferredVendor > 0 ? true : false,
                dataRow.IsActive > 0 ? true : false,
                dataRow.PricingRequiresReview > 0 ? true : false,
                (decimal)dataRow.MinimumOrder,
                dataRow.CreateDate, dataRow.ModifyDate);
            return entity;
        }

        [DebuggerStepThrough]
        public override List<Vendor> CreateEntities(SqlDataAdapter adapter)
        {
            OrderingDataSet dataSet = new OrderingDataSet();
            adapter.Fill(dataSet.Vendor);
            return CreateEntities(dataSet.Vendor);
        }

        [DebuggerStepThrough]
        protected override void AddInsertUpdateParams(SqlCommand cmd, Vendor entity)
        {
            SqlHelper.AddParamVarchar(cmd, "@VendorName", entity.VendorName ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@Terms", entity.Terms ?? string.Empty);
            SqlHelper.AddParamInt(cmd, "@PriceCode", entity.PriceCode);
            SqlHelper.AddParamVarchar(cmd, "@Shipping", entity.Shipping ?? string.Empty);
            SqlHelper.AddParamVarchar(cmd, "@SortCode", entity.SortCode ?? string.Empty);
            SqlHelper.AddParamInputId(cmd, "@RepContactId", entity.RepContactId.Value);
            SqlHelper.AddParamInputId(cmd, "@OrdContactId", entity.OrdContactId.Value);
            SqlHelper.AddParamInputId(cmd, "@ShpContactId", entity.ShpContactId.Value);
            SqlHelper.AddParamInputId(cmd, "@ActContactId", entity.ActContactId.Value);
            SqlHelper.AddParamVarchar(cmd, "@Notes", entity.Notes ?? string.Empty);
            SqlHelper.AddParamTinyint(cmd, "@PreferredVendor", entity.PreferredVendor);
            SqlHelper.AddParamTinyint(cmd, "@IsActive", entity.IsActive);
            SqlHelper.AddParamTinyint(cmd, "@PricingRequiresReview", entity.PricingRequiresReview);
            SqlHelper.AddParamMoney(cmd, "@MinimumOrder", entity.MinimumOrder);
        }

        protected override string EntityName
        {
            [DebuggerStepThrough]
            get { return "Vendor"; }
        }

        #endregion
    }
}
