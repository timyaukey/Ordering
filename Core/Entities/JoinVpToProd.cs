using System;
using System.Collections.Generic;
using Willowsoft.WillowLib.Data.Entity;
using Willowsoft.WillowLib.Data.Misc;
using Willowsoft.Ordering.Core.Repositories;

namespace Willowsoft.Ordering.Core.Entities
{
    // Generated by TypeWrapperGenerator

    public partial class JoinVpToProd : IPersistable
    {
        public JoinVpToProd(VendorProduct innerVendorProduct, Product innerProduct)
        {
            mInnerVendorProduct = innerVendorProduct;
            mInnerProduct = innerProduct;
        }
        public JoinVpToProd()
        {
            mInnerVendorProduct = new VendorProduct();
            mInnerProduct = new Product();
        }

        private VendorProduct mInnerVendorProduct;
        public VendorProduct InnerVendorProduct { get { return mInnerVendorProduct; } }

        private Product mInnerProduct;
        public Product InnerProduct { get { return mInnerProduct; } }

        // VendorProduct properties

        public VendorId VendorProduct_VendorId
        {
            get { return mInnerVendorProduct.VendorId; }
            set { mInnerVendorProduct.VendorId = value; }
        }

        public ProductId VendorProduct_ProductId
        {
            get { return mInnerVendorProduct.ProductId; }
            set { mInnerVendorProduct.ProductId = value; }
        }

        public Decimal VendorProduct_RetailPriceOverride
        {
            get { return mInnerVendorProduct.RetailPriceOverride; }
            set { mInnerVendorProduct.RetailPriceOverride = value; }
        }

        public String VendorProduct_VendorPartNum
        {
            get { return mInnerVendorProduct.VendorPartNum; }
            set { mInnerVendorProduct.VendorPartNum = value; }
        }

        public Decimal VendorProduct_CaseCost
        {
            get { return mInnerVendorProduct.CaseCost; }
            set { mInnerVendorProduct.CaseCost = value; }
        }

        public Int32 VendorProduct_CountInCase
        {
            get { return mInnerVendorProduct.CountInCase; }
            set { mInnerVendorProduct.CountInCase = value; }
        }

        public Decimal VendorProduct_EachCost
        {
            get { return mInnerVendorProduct.EachCost; }
            set { mInnerVendorProduct.EachCost = value; }
        }

        public Boolean VendorProduct_PreferredSource
        {
            get { return mInnerVendorProduct.PreferredSource; }
            set { mInnerVendorProduct.PreferredSource = value; }
        }

        public Boolean VendorProduct_IsActive
        {
            get { return mInnerVendorProduct.IsActive; }
            set { mInnerVendorProduct.IsActive = value; }
        }

        public Boolean VendorProduct_PricingRequiresReview
        {
            get { return mInnerVendorProduct.PricingRequiresReview; }
            set { mInnerVendorProduct.PricingRequiresReview = value; }
        }

        public Boolean VendorProduct_NumAndCostRequireReview
        {
            get { return mInnerVendorProduct.NumAndCostRequireReview; }
            set { mInnerVendorProduct.NumAndCostRequireReview = value; }
        }

        public VendorProductId VendorProduct_Id
        {
            get { return mInnerVendorProduct.Id; }
            set { mInnerVendorProduct.Id = value; }
        }

        public DateTime VendorProduct_CreateDate
        {
            get { return mInnerVendorProduct.CreateDate; }
            set { mInnerVendorProduct.CreateDate = value; }
        }

        public DateTime VendorProduct_ModifyDate
        {
            get { return mInnerVendorProduct.ModifyDate; }
            set { mInnerVendorProduct.ModifyDate = value; }
        }

        // Product properties

        public String Product_ProductName
        {
            get { return mInnerProduct.ProductName; }
            set { mInnerProduct.ProductName = value; }
        }

        public ProductSubCategoryId Product_ProductSubCategoryId
        {
            get { return mInnerProduct.ProductSubCategoryId; }
            set { mInnerProduct.ProductSubCategoryId = value; }
        }

        public String Product_Size
        {
            get { return mInnerProduct.Size; }
            set { mInnerProduct.Size = value; }
        }

        public Decimal Product_RetailPrice
        {
            get { return mInnerProduct.RetailPrice; }
            set { mInnerProduct.RetailPrice = value; }
        }

        public ProductBrandId Product_ProductBrandId
        {
            get { return mInnerProduct.ProductBrandId; }
            set { mInnerProduct.ProductBrandId = value; }
        }

        public String Product_ManufacturerBarcode
        {
            get { return mInnerProduct.ManufacturerBarcode; }
            set { mInnerProduct.ManufacturerBarcode = value; }
        }

        public String Product_ManufacturerPartNum
        {
            get { return mInnerProduct.ManufacturerPartNum; }
            set { mInnerProduct.ManufacturerPartNum = value; }
        }

        public Boolean Product_IsActive
        {
            get { return mInnerProduct.IsActive; }
            set { mInnerProduct.IsActive = value; }
        }

        public Boolean Product_PricingRequiresReview
        {
            get { return mInnerProduct.PricingRequiresReview; }
            set { mInnerProduct.PricingRequiresReview = value; }
        }

        public ProductId Product_Id
        {
            get { return mInnerProduct.Id; }
            set { mInnerProduct.Id = value; }
        }

        public DateTime Product_CreateDate
        {
            get { return mInnerProduct.CreateDate; }
            set { mInnerProduct.CreateDate = value; }
        }

        public DateTime Product_ModifyDate
        {
            get { return mInnerProduct.ModifyDate; }
            set { mInnerProduct.ModifyDate = value; }
        }

        // IPersistable members

        public bool IsDirty
        {
            get
            {
                return mInnerVendorProduct.IsDirty
                    | mInnerProduct.IsDirty;
            }
            set
            {
                mInnerVendorProduct.IsDirty = value;
                mInnerProduct.IsDirty = value;
            }
        }

        public bool IsDeleted
        {
            get
            {
                return mInnerVendorProduct.IsDeleted
                    | mInnerProduct.IsDeleted;
            }
            set
            {
                mInnerVendorProduct.IsDeleted = value;
                mInnerProduct.IsDeleted = value;
            }
        }

        public bool IsPersisted
        {
            get
            {
                return mInnerVendorProduct.IsPersisted
                    | mInnerProduct.IsPersisted;
            }
        }

        // You'll have to add your own Validate()...
    }

    public partial class JoinVpToProd
    {
        public void Validate(ErrorList errors)
        {
            mInnerVendorProduct.Validate(errors);
            mInnerProduct.Validate(errors);
        }

        public interface IFreightProvider
        {
            double FreightPercent { get; }
        }
        private IFreightProvider mFreightProvider;

        public void SetExternalData(IFreightProvider freightProvider)
        {
            mFreightProvider = freightProvider;
        }

        public double NormalMargin
        {
            get
            {
                return VendorProduct.ComputeMargin(Product_RetailPrice, EachCostWithoutFreight,
                    FreightPercent);
            }
        }

        public double VendorMargin
        {
            get
            {
                return VendorProduct.ComputeMargin(VendorProduct_RetailPriceOverride, EachCostWithoutFreight,
                    FreightPercent);
            }
        }

        private double FreightPercent
        {
            get
            {
                // This will be null on new lines (like the new line at the end of a grid).
                if (mFreightProvider == null)
                    return 0.0;
                else
                    return mFreightProvider.FreightPercent;
            }
        }

        private decimal EachCostWithoutFreight
        {
            get
            {
                if (VendorProduct_CaseCost > 0.0M && VendorProduct_CountInCase > 0)
                    return VendorProduct_CaseCost / VendorProduct_CountInCase;
                else
                    return VendorProduct_EachCost;
            }
        }

        public override string ToString()
        {
            return InnerVendorProduct.ToString() + " - " + InnerProduct.ToString();
        }
    }
    
    /// <summary>
    /// An EntityBindingList<JoinVpToProd> that delegates persistence
    /// operations to the VendorProduct and Product repositories.
    /// </summary>
    public class JoinVpToProdBindingList : PersistedBindingList<JoinVpToProd>
    {
        public JoinVpToProdBindingList()
            : base(Ambient.DbSession)
        {
        }

        protected override void Delete(JoinVpToProd entity)
        {
            if (entity.InnerVendorProduct.IsPersisted)
            {
                OrderingRepositories.VendorProduct.Delete(entity.InnerVendorProduct);
            }
            if (entity.InnerProduct.IsPersisted)
            {
                List<VendorProduct> otherUses = OrderingRepositories.VendorProduct.Get(entity.InnerProduct.Id);
                if (otherUses.Count == 0)
                    OrderingRepositories.Product.Delete(entity.InnerProduct);
            }
        }

        protected override void Insert(JoinVpToProd entity)
        {
            InsertUpdate(entity);
        }

        protected override void Update(JoinVpToProd entity)
        {
            InsertUpdate(entity);
        }

        private void InsertUpdate(JoinVpToProd entity)
        {
            if (entity.InnerProduct.IsDirty)
            {
                if (entity.InnerProduct.IsPersisted)
                    OrderingRepositories.Product.Update(entity.InnerProduct);
                else
                    OrderingRepositories.Product.Insert(entity.InnerProduct);
            }
            if (entity.InnerVendorProduct.IsDirty)
            {
                entity.VendorProduct_ProductId = entity.Product_Id;
                if (entity.InnerVendorProduct.IsPersisted)
                    OrderingRepositories.VendorProduct.Update(entity.InnerVendorProduct);
                else
                    OrderingRepositories.VendorProduct.Insert(entity.InnerVendorProduct);
            }
        }

        public override string EntityDisplayName
        {
            get { return "vendor product"; }
        }
    }
}
